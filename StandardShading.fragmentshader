#version 330 core

// Interpolated values from the vertex shaders
in vec4 vs_vertexColor;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 LightDirection_cameraspace2;
in vec3 LightDirection_cameraspace3;

// Ouput data
out vec3 color;


// Values that stay constant for the whole mesh.
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform vec3 LightPosition_worldspace2;
uniform vec3 LightPosition_worldspace3;

// TL
// ATTN: Refer to https://learnopengl.com/Lighting/Colors and https://learnopengl.com/Lighting/Basic-Lighting
// to familiarize yourself with implementing basic lighting model in OpenGL shaders

void main() {

	vec3 LightColor = vec3(1,1,1);
	vec3 LightColor2 = vec3(1,0,0);
	vec3 LightColor3 = vec3(0,0,1);
	float LightPower = 100.0f;
	float LightPower2 = 0.0f;
	float LightPower3 = 0.0f;
	
	//color = vs_vertexColor.rgb;
	vec3 MaterialDiffuseColor =  vs_vertexColor.rgb;
	vec3 MaterialAmbientColor = vec3(0.2,0.2,0.2) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.1,0.1,0.1);


	float distance = length( LightPosition_worldspace - Position_worldspace );
	float distance2 = length( LightPosition_worldspace2 - Position_worldspace );
	float distance3 = length( LightPosition_worldspace3 - Position_worldspace );


	vec3 n = normalize( Normal_cameraspace );
	vec3 l = normalize( LightDirection_cameraspace );
	vec3 l2 = normalize( LightDirection_cameraspace2 );
	vec3 l3 = normalize( LightDirection_cameraspace3 );
	float cosTheta = clamp( dot( n,l ), 0,1 );
	float cosTheta2 = clamp( dot( n,l2 ), 0,1 );
	float cosTheta3 = clamp( dot( n,l3 ), 0,1 );


	vec3 E = normalize(EyeDirection_cameraspace);
	vec3 R = reflect(-l,n);
	vec3 R2 = reflect(-l2,n);
	vec3 R3 = reflect(-l3,n);
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	float cosAlpha2 = clamp( dot( E,R2 ), 0,1 );
	float cosAlpha3 = clamp( dot( E,R3 ), 0,1 );
	
	/*color = 
		MaterialAmbientColor +

		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +

		MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance) +

		MaterialAmbientColor +

		MaterialDiffuseColor * LightColor2 * LightPower2 * cosTheta2 / (distance2*distance2) +

		MaterialSpecularColor * LightColor2 * LightPower2 * pow(cosAlpha2,5) / (distance2*distance2) +

		MaterialAmbientColor +

		MaterialDiffuseColor * LightColor3 * LightPower3 * cosTheta3 / (distance3*distance3) +

		MaterialSpecularColor * LightColor3 * LightPower3 * pow(cosAlpha3,5) / (distance*distance3);*/

		color = vs_vertexColor.rgb;


}